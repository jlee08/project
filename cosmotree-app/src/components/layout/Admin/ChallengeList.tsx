// src/components/admin/ChallengeList.tsx
import React, { useEffect, useMemo, useState } from 'react';
import {
  collection,
  onSnapshot,
  getDoc,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  serverTimestamp,
  query,
  orderBy,
} from 'firebase/firestore';
import { db } from '../../../config/firebase';
import { AdminGuideCard } from './AdminGuideCard';
import Swal from 'sweetalert2';
import ReactMarkdown from 'react-markdown';
import { TypeAnimation } from 'react-type-animation';

// =========================
// Types
// =========================
type Lesson = { title: string; content: string };
type ModuleDoc = {
  id: string;
  title: string;
  difficulty?: string;
  imageUrl?: string;
  lessons: Lesson[];
  createdAt?: any;
};

type ChallengeDoc = {
  id?: string;
  templateId?: string | null;
  templateName?: string | null;
  generatedContent: any; // JSON or string (if forceJson = false)
  rawPrompt?: string | null; // admin-entered prompt saved for traceability
  createdAt?: any;
  updatedAt?: any;
};

type TemplateDoc = {
  id?: string;
  name: string;
  category?: string;
  prompt: string; // free-form prompt (can be one-liners)
  variables?: string[]; // optional
  createdAt?: any;
  updatedAt?: any;
};

// =========================
// Typing Animation Component
// =========================
const AIResponseTyping: React.FC<{ 
  text: string; 
  onComplete?: () => void;
  onPreview?: (content: string) => void;
}> = ({ text, onComplete, onPreview }) => {
  const [displayText, setDisplayText] = useState('');
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isTypingComplete, setIsTypingComplete] = useState(false);

  useEffect(() => {
    if (currentIndex < text.length) {
      const timer = setTimeout(() => {
        setDisplayText(prev => prev + text[currentIndex]);
        setCurrentIndex(prev => prev + 1);
      }, 2); // Fast typing speed

      return () => clearTimeout(timer);
    } else if (!isTypingComplete) {
      setIsTypingComplete(true);
      if (onComplete) {
        onComplete();
      }
    }
  }, [currentIndex, text, onComplete, isTypingComplete]);

  // Reset function
  useEffect(() => {
    setDisplayText('');
    setCurrentIndex(0);
    setIsTypingComplete(false);
  }, [text]);

  return (
    <div className="bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-xl p-6">
      <div className="flex items-center gap-3 mb-4">
        <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center">
          <span className="text-white text-sm font-bold">AI</span>
        </div>
        <span className="text-lg font-semibold text-purple-700">Generated Challenge</span>
      </div>
      
      <div className="text-gray-800 leading-relaxed prose prose-sm max-w-none">
        <ReactMarkdown>
          {displayText}
        </ReactMarkdown>
        {!isTypingComplete && (
          <span className="inline-block w-3 h-6 bg-purple-500 animate-pulse ml-1 rounded-sm"></span>
        )}
      </div>
      
      {isTypingComplete && (
        <div className="mt-4 pt-4 border-t border-purple-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-sm text-purple-600">
              <span>‚ú®</span>
              <span>Generated by AI ‚Ä¢ Powered by OpenAI</span>
            </div>
            <button
              onClick={() => onPreview && onPreview(text)}
              className="px-4 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors text-sm font-medium flex items-center gap-2"
            >
              <span>üëÅÔ∏è</span>
              <span>Preview Full Content</span>
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// =========================
// Preview Modal Component
// =========================
const PreviewModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  content: string;
}> = ({ isOpen, onClose, content }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-xl font-bold text-gray-900">Challenge Preview</h2>
          <button
            onClick={onClose}
            className="w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 flex items-center justify-center transition-colors"
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
              <path
                d="M18 6L6 18M6 6L18 18"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </button>
        </div>
        
        <div className="p-6 overflow-y-auto max-h-[calc(50vh-120px)]">
          <div className="prose prose-sm max-w-none">
            <ReactMarkdown>{content}</ReactMarkdown>
          </div>
        </div>
        
        <div className="flex justify-end gap-3 p-6 border-t bg-gray-50">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
          >
            Close
          </button>
          <button
            onClick={() => {
              navigator.clipboard.writeText(content);
              Swal.fire({
                icon: 'success',
                title: 'Copied!',
                text: 'Content copied to clipboard',
                timer: 1500,
                showConfirmButton: false
              });
            }}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            üìã Copy to Clipboard
          </button>
        </div>
      </div>
    </div>
  );
};

// =========================
// Helpers
// =========================
const LS_API_KEY = 'openai_api_key_for_admin_only';

function buildBlueprintPromptText({
  moduleDoc,
  freePrompt,
  forceEnglish = true,
}: {
  moduleDoc: { title: string; difficulty?: string; lessons: { title: string; content: string }[] };
  freePrompt: string;
  forceEnglish?: boolean;
}) {
  const lessonsMd = clampText(toLessonsMarkdown(moduleDoc.lessons, 10), 12000);
  const lessonTitles = (moduleDoc.lessons || []).map(l => l.title).join(', ');
  const lang = forceEnglish ? 'English' : 'Korean';

  return `
You are an educational content designer.

Goal:
- Turn the admin-authored instruction into a student-facing challenge SPEC (blueprint).
- DO NOT solve the task. DO NOT produce sample answers. Output the specification only.

Admin instruction:
"${freePrompt}"

Hard constraints:
- Base everything ONLY on the Module lessons below (no external facts).
- Include a clear mission title, detailed instructions, expected output format, constraints, and an evaluation rubric.
- Language for any student-facing text: ${lang}.

Module context:
- Title: ${moduleDoc.title}
- Difficulty: ${moduleDoc.difficulty ?? 'Beginner'}
- Lesson count: ${(moduleDoc.lessons || []).length}
- Lesson titles: ${lessonTitles}

Module lessons (markdown):
${lessonsMd}
`.trim();
}

const clampText = (s: string, max = 12000) =>
  typeof s === 'string' && s.length > max ? s.slice(0, max) + '\n[TRUNCATED]' : s;

const toLessonsMarkdown = (lessons: { title: string; content: string }[], limit = 10) =>
  (lessons || [])
    .slice(0, limit)
    .map((l, i) => `### Lesson ${i + 1}: ${l.title}\n${l.content}`)
    .join('\n\n');

const fillTemplate = (tmpl: string, ctx: Record<string, string | number | boolean>) =>
  tmpl.replace(/\{\{\s*(\w+)\s*\}\}/g, (_, k) => String(k in ctx ? ctx[k] : `{{${k}}}`));

// Extract JSON even if the model added fences or extra text
const tryParseJson = (raw: string) => {
  const fence = raw.match(/```json\s*([\s\S]*?)```/i) || raw.match(/```\s*([\s\S]*?)```/);
  const text = fence ? fence[1] : raw;
  try {
    return JSON.parse(text);
  } catch {
    const firstBrace = text.indexOf('{');
    const lastBrace = text.lastIndexOf('}');
    if (firstBrace >= 0 && lastBrace > firstBrace) {
      try {
        return JSON.parse(text.slice(firstBrace, lastBrace + 1));
      } catch {}
    }
    throw new Error('Failed to parse JSON from the model response.');
  }
};

// OpenAI direct call (dev only; key is stored locally in browser)
async function openAIChatDirect({
  apiKey,
  system,
  user, // ‚Üê Ïó¨Í∏∞Î°ú finalUserPrompt ÎÑ£Ïñ¥ÏÑú Ìò∏Ï∂ú
  model = 'gpt-4o-mini',
  temperature = 0.7,
}: {
  apiKey: string;
  system: string;
  user: string;
  model?: string;
  temperature?: number;
}) {
  const body: any = {
    model,
    temperature,
    messages: [
      { role: 'system', content: system },
      { role: 'user', content: user },
    ],
  };

  const resp = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${apiKey}`,
    },
    body: JSON.stringify(body),
  });

  if (!resp.ok) {
    throw new Error(`OpenAI error: ${resp.status} ${await resp.text()}`);
  }

  const data = await resp.json();
  const content = data?.choices?.[0]?.message?.content ?? '';
  return content;
}
// Cloud Functions proxy (prod recommended)
async function callFunctionGenerateChallenge(payload: {
  prompt: string;
  forceJson?: boolean;
  forceEnglish?: boolean;
}) {
  const resp = await fetch('/api/generateChallenge', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify(payload),
  });
  if (!resp.ok) {
    const t = await resp.text();
    throw new Error(`Function error: ${resp.status} ${t}`);
  }
  return await resp.json();
}

// Build final prompt using admin-authored instruction + auto-injected module lessons
function buildAdminDrivenPrompt({
  moduleDoc,
  freePrompt,
  forceEnglish = true,
}: {
  moduleDoc: { title: string; difficulty?: string; lessons: { title: string; content: string }[] };
  freePrompt: string;
  forceEnglish?: boolean;
}) {
  const lessonsMd = clampText(toLessonsMarkdown(moduleDoc.lessons, 10), 12000);
  const lessonTitles = (moduleDoc.lessons || []).map(l => l.title).join(', ');
  const langHint = forceEnglish ? ' Write all outputs in English.' : '';

  return `
${freePrompt}${langHint}

Use ONLY the Module lessons below as your factual basis.

Module context:
- Title: ${moduleDoc.title}
- Difficulty: ${moduleDoc.difficulty ?? 'Beginner'}
- Lesson count: ${(moduleDoc.lessons || []).length}
- Lesson titles: ${lessonTitles}

Lessons (markdown):
${lessonsMd}
`.trim();
}

// =========================
// Template Manager (CRUD)
// =========================
function TemplateManager({
  selectedId,
  onSelectId,
}: {
  selectedId?: string;
  onSelectId: (id: string) => void;
}) {
  const [templates, setTemplates] = useState<TemplateDoc[]>([]);
  const [form, setForm] = useState<TemplateDoc>({
    name: '',
    category: '',
    prompt: '',
    variables: [],
  });
  const [editingId, setEditingId] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  // Realtime subscription
  useEffect(() => {
    const qy = query(collection(db, 'challengeTemplates'), orderBy('updatedAt', 'desc'));
    const unsub = onSnapshot(qy, snap => {
      setTemplates(snap.docs.map(d => ({ id: d.id, ...(d.data() as TemplateDoc) })));
    });
    return unsub;
  }, []);

  const resetForm = () => {
    setForm({ name: '', category: '', prompt: '', variables: [] });
    setEditingId(null);
    onSelectId('');
  };

  const handleSave = async () => {
    if (!form.name || !form.prompt) {
      alert('Name and Prompt are required.');
      return;
    }
    setLoading(true);
    try {
      if (editingId) {
        await updateDoc(doc(db, 'challengeTemplates', editingId), {
          name: form.name,
          category: form.category ?? '',
          prompt: form.prompt,
          variables: form.variables ?? [],
          updatedAt: serverTimestamp(),
        });
      } else {
        const ref = await addDoc(collection(db, 'challengeTemplates'), {
          name: form.name,
          category: form.category ?? '',
          prompt: form.prompt,
          variables: form.variables ?? [],
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp(),
        });
        onSelectId(ref.id);
      }
      resetForm();
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (t: TemplateDoc) => {
    setEditingId(t.id!);
    setForm({
      id: t.id,
      name: t.name,
      category: t.category ?? '',
      prompt: t.prompt,
      variables: t.variables ?? [],
    });
    onSelectId(t.id!);
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm('Delete this template?')) return;
    setLoading(true);
    try {
      await deleteDoc(doc(db, 'challengeTemplates', id));
      if (editingId === id) resetForm();
      if (selectedId === id) onSelectId('');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white border rounded-2xl p-4 md:p-6 shadow-sm">
      <div className="flex items-center justify-between mb-3">
        <h3 className="text-lg font-semibold">Challenge Templates</h3>
      </div>

      {/* List */}
      <div className="max-h-64 overflow-auto border rounded-xl">
        <table className="w-full text-sm">
          <thead className="bg-gray-50">
            <tr>
              <th className="text-left p-2">Name</th>
              <th className="text-left p-2">Category</th>
              <th className="text-right p-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {templates.map(t => (
              <tr
                key={t.id}
                className={`border-t hover:bg-gray-50 ${selectedId === t.id ? 'bg-indigo-50' : ''}`}
              >
                <td className="p-2">{t.name}</td>
                <td className="p-2">{t.category}</td>
                <td className="p-2 text-right space-x-2">
                  <button className="px-2 py-1 border rounded" onClick={() => handleEdit(t)}>
                    Edit
                  </button>
                  <button
                    className="px-2 py-1 border rounded text-red-600"
                    onClick={() => handleDelete(t.id!)}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
            {templates.length === 0 && (
              <tr>
                <td className="p-3 text-gray-500" colSpan={3}>
                  No templates yet. Create one below.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Form */}
      <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-1">Name</label>
          <input
            className="w-full border rounded-lg px-3 py-2"
            value={form.name}
            onChange={e => setForm(f => ({ ...f, name: e.target.value }))}
            placeholder="Keywords Essay (Admin)"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Category</label>
          <input
            className="w-full border rounded-lg px-3 py-2"
            value={form.category ?? ''}
            onChange={e => setForm(f => ({ ...f, category: e.target.value }))}
            placeholder="Essay / Quiz / Project ..."
          />
        </div>
        <div className="md:col-span-2">
          <label className="block text-sm font-medium mb-1">Prompt</label>
          <textarea
            className="w-full border rounded-lg px-3 py-2 h-40"
            value={form.prompt}
            onChange={e => setForm(f => ({ ...f, prompt: e.target.value }))}
            placeholder="e.g., Extract 5 core keywords from the lessons and write a ~1000-character essay that includes them."
          />
        </div>
      </div>

      <div className="mt-4 flex items-center gap-2">
        <button
          disabled={loading}
          className="px-4 py-2 rounded-lg bg-black text-white"
          onClick={handleSave}
        >
          {editingId ? 'Update Template' : 'Create Template'}
        </button>
        <button className="px-4 py-2 rounded-lg border" onClick={resetForm}>
          Reset
        </button>
      </div>
    </div>
  );
}

// =========================
// Main
// =========================
export default function ChallengeList() {
  // Modules
  const [modules, setModules] = useState<ModuleDoc[]>([]);
  const [selectedModuleId, setSelectedModuleId] = useState<string>('');

  // Selected module doc (live)
  const [moduleDoc, setModuleDoc] = useState<ModuleDoc | null>(null);

  // Templates
  const [templates, setTemplates] = useState<TemplateDoc[]>([]);
  const [selectedTemplateId, setSelectedTemplateId] = useState<string>(''); // optional
  const currentTemplate = useMemo(
    () => templates.find(t => t.id === selectedTemplateId) ?? null,
    [templates, selectedTemplateId]
  );

  // Admin custom prompt
  const [adminPrompt, setAdminPrompt] = useState<string>('');

  // Output options
  const [forceJson, setForceJson] = useState<boolean>(true);
  const [forceEnglish, setForceEnglish] = useState<boolean>(true);

  // Challenges of module
  const [challenges, setChallenges] = useState<ChallengeDoc[]>([]);

  // Generation state
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<string>('');
  const [showTypingAnimation, setShowTypingAnimation] = useState(false);
  const [isPreviewModalOpen, setIsPreviewModalOpen] = useState(false);
  const [previewContent, setPreviewContent] = useState<string>('');

  // Direct OpenAI key (dev)
  const [apiKey, setApiKey] = useState<string>(() => 
    localStorage.getItem(LS_API_KEY) || process.env.REACT_APP_OPENAI_API_KEY || ''
  );
  const [useDirectKey, setUseDirectKey] = useState<boolean>(!!apiKey);

  // ===== Realtime: modules list =====
  useEffect(() => {
    const unsub = onSnapshot(collection(db, 'modules'), snap => {
      setModules(snap.docs.map(d => ({ id: d.id, ...(d.data() as any) })));
    });
    return unsub;
  }, []);

  // ===== Realtime: selected module doc =====
  useEffect(() => {
    if (!selectedModuleId) {
      setModuleDoc(null);
      return;
    }
    const unsub = onSnapshot(doc(db, 'modules', selectedModuleId), snap => {
      setModuleDoc(snap.exists() ? { id: snap.id, ...(snap.data() as any) } : null);
    });
    return unsub;
  }, [selectedModuleId]);

  // ===== Realtime: templates list =====
  useEffect(() => {
    const qy = query(collection(db, 'challengeTemplates'), orderBy('updatedAt', 'desc'));
    const unsub = onSnapshot(qy, snap => {
      setTemplates(snap.docs.map(d => ({ id: d.id, ...(d.data() as any) })));
    });
    return unsub;
  }, []);

  // ===== Realtime: challenges of selected module =====
  useEffect(() => {
    if (!selectedModuleId) {
      setChallenges([]);
      return;
    }
    const qy = query(
      collection(db, `modules/${selectedModuleId}/challenges`),
      orderBy('createdAt', 'desc')
    );
    const unsub = onSnapshot(qy, snap => {
      setChallenges(snap.docs.map(d => ({ id: d.id, ...(d.data() as any) })));
    });
    return unsub;
  }, [selectedModuleId]);

  const saveKey = () => {
    if (useDirectKey && apiKey) localStorage.setItem(LS_API_KEY, apiKey);
    else localStorage.removeItem(LS_API_KEY);
    alert('Saved.');
  };

  const handleGenerate = async (existingChallengeId?: string) => {
    if (!selectedModuleId) {
      Swal.fire({
        icon: 'warning',
        title: 'Module Required',
        text: 'Please select a module first.',
      });
      return;
    }

    // Show loading SweetAlert
    Swal.fire({
      title: 'Generating Challenge...',
      html: `
        <div style="text-align: center;">
          <div style="font-size: 48px; margin-bottom: 16px;">ü§ñ</div>
          <p style="margin-bottom: 16px;">AI is creating your challenge content</p>
          <div style="display: flex; justify-content: center; gap: 4px;">
            <div style="width: 8px; height: 8px; background: #9333ea; border-radius: 50%; animation: bounce 1.4s infinite ease-in-out both; animation-delay: -0.32s;"></div>
            <div style="width: 8px; height: 8px; background: #9333ea; border-radius: 50%; animation: bounce 1.4s infinite ease-in-out both; animation-delay: -0.16s;"></div>
            <div style="width: 8px; height: 8px; background: #9333ea; border-radius: 50%; animation: bounce 1.4s infinite ease-in-out both;"></div>
          </div>
        </div>
        <style>
          @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1); }
          }
        </style>
      `,
      allowOutsideClick: false,
      allowEscapeKey: false,
      showConfirmButton: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    setIsGenerating(true);
    setGeneratedContent('');
    setShowTypingAnimation(false);

    try {
      // Always re-fetch latest module and (optional) template before generating
      const moduleSnap = await getDoc(doc(db, 'modules', selectedModuleId));
      if (!moduleSnap.exists()) throw new Error('Module not found.');
      const moduleLatest = { id: moduleSnap.id, ...(moduleSnap.data() as any) };

      if (!Array.isArray(moduleLatest.lessons) || moduleLatest.lessons.length === 0) {
        throw new Error('This module has no lessons.');
      }

      // Decide prompt: admin first, else template
      let finalUserPrompt = '';
      let templateUsed: { id?: string; name?: string } = {};

      // (A) Í¥ÄÎ¶¨Ïûê Ïª§Ïä§ÌÖÄ ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä ÏûàÏúºÎ©¥ Í∑∏Í±∏ Í∑úÏπôÏúºÎ°ú ‚Üí BLUEPRINT ÏÉùÏÑ±
      if (adminPrompt?.trim()) {
        finalUserPrompt = buildBlueprintPromptText({
          moduleDoc: moduleLatest,
          freePrompt: adminPrompt.trim(),
          forceEnglish,
        });
        templateUsed = { id: 'custom', name: 'Admin Custom (Blueprint)' };

        // (B) ÏóÜÏúºÎ©¥ ÌÖúÌîåÎ¶øÏùÑ Í∑úÏπôÏúºÎ°ú ‚Üí BLUEPRINT ÏÉùÏÑ±
      } else {
        const tmplId = currentTemplate?.id ?? templates[0]?.id;
        if (!tmplId) throw new Error('Provide a custom prompt or choose a template.');

        const tmplSnap = await getDoc(doc(db, 'challengeTemplates', tmplId));
        if (!tmplSnap.exists()) throw new Error('Template not found.');
        const tmpl = { id: tmplSnap.id, ...(tmplSnap.data() as any) };
        templateUsed = { id: tmpl.id, name: `${tmpl.name} (Blueprint)` };

        // ÌÖúÌîåÎ¶øÏóê Ìï∏Îì§Î∞î Î≥ÄÏàòÍ∞Ä ÏûàÏúºÎ©¥ Ï±ÑÏö∞Í≥†, ÏóÜÏúºÎ©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
        const lessonsMd = clampText(toLessonsMarkdown(moduleLatest.lessons, 10), 12000);
        const ctx = {
          moduleTitle: moduleLatest.title,
          moduleDifficulty: moduleLatest.difficulty ?? 'Beginner',
          lessonsMarkdown: lessonsMd,
          templateName: tmpl.name,
        };
        const hasVars = /\{\{\s*lessonsMarkdown\s*\}\}|\{\{\s*moduleTitle\s*\}\}/.test(
          tmpl.prompt || ''
        );
        const ruleText = hasVars ? fillTemplate(tmpl.prompt, ctx) : tmpl.prompt;

        finalUserPrompt = buildBlueprintPromptText({
          moduleDoc: moduleLatest,
          freePrompt: ruleText,
          forceEnglish,
        });
      }

      // Call LLM (direct or CF)
      let resultPayload: any;
      if (useDirectKey && apiKey) {
        resultPayload = await openAIChatDirect({
          apiKey,
          system: 'You are an educational content generator.',
          user: finalUserPrompt,
          model: 'gpt-4o-mini',
          temperature: 0.7,
        });
      } else {
        resultPayload = await callFunctionGenerateChallenge({
          prompt: finalUserPrompt,
          forceJson,
          forceEnglish,
        });
      }

      // Save to Firestore
      if (existingChallengeId) {
        await updateDoc(doc(db, `modules/${moduleLatest.id}/challenges/${existingChallengeId}`), {
          generatedContent: resultPayload,
          templateId: templateUsed.id ?? null,
          templateName: templateUsed.name ?? null,
          rawPrompt: adminPrompt?.trim() || null,
          updatedAt: serverTimestamp(),
        });
      } else {
        await addDoc(collection(db, `modules/${moduleLatest.id}/challenges`), {
          templateId: templateUsed.id ?? null,
          templateName: templateUsed.name ?? null,
          generatedContent: resultPayload,
          rawPrompt: adminPrompt?.trim() || null,
          createdAt: serverTimestamp(),
          updatedAt: null,
        });
      }

      // Close loading modal
      Swal.close();

      // Set generated content and start typing animation
      const contentText = typeof resultPayload === 'string' ? resultPayload : JSON.stringify(resultPayload, null, 2);
      setGeneratedContent(contentText);
      setShowTypingAnimation(true);

      // Success notification
      setTimeout(() => {
        Swal.fire({
          icon: 'success',
          title: 'Challenge Generated! üéâ',
          text: 'Your AI-powered challenge has been created successfully.',
          timer: 2000,
          showConfirmButton: false,
        });
      }, 500);

    } catch (e: any) {
      console.error('Challenge generation error:', e);
      
      // Close loading modal
      Swal.close();
      
      // Show error
      setTimeout(() => {
        Swal.fire({
          icon: 'error',
          title: 'Generation Failed',
          text: e.message || 'An unexpected error occurred while generating the challenge.',
          confirmButtonText: 'Try Again',
          confirmButtonColor: '#ef4444',
        });
      }, 100);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDeleteChallenge = async (id: string) => {
    if (!selectedModuleId) return;
    if (!window.confirm('Delete this challenge?')) return;
    await deleteDoc(doc(db, `modules/${selectedModuleId}/challenges/${id}`));
  };

  return (
    <div className="space-y-6">
      {/* ÎèÑÏõÄÎßê Ïπ¥Îìú */}
      <AdminGuideCard
        icon="puzzle"
        title="Challenge Management Guide"
        description="Create AI-powered learning challenges using templates and module content to engage students."
        tips={[
          "Select a module first to provide context for challenge generation",
          "Use templates for consistent challenge structure and style",
          "Create custom prompts for unique learning objectives",
          "AI will automatically include relevant lesson content from selected modules",
          "Review generated content before publishing to ensure quality"
        ]}
      />

      {/* Top Controls */}
      <div className="bg-white border rounded-2xl p-4 md:p-6 shadow-sm">
        <div className="grid md:grid-cols-3 gap-4 mb-4">
          {/* Module */}
          <div>
            <label className="block text-sm font-medium mb-1">Module</label>
            <select
              className="w-full border rounded-lg px-3 py-2"
              value={selectedModuleId}
              onChange={e => setSelectedModuleId(e.target.value)}
            >
              <option value="">Select a module</option>
              {modules.map(m => (
                <option key={m.id} value={m.id}>
                  {m.title}
                </option>
              ))}
            </select>
            <p className="text-xs text-gray-500 mt-1">
              We‚Äôll always attach the latest lessons from this module.
            </p>
          </div>

          {/* Template (optional) */}
          <div>
            <label className="block text-sm font-medium mb-1">Template (optional)</label>
            <select
              className="w-full border rounded-lg px-3 py-2"
              value={selectedTemplateId}
              onChange={e => setSelectedTemplateId(e.target.value)}
            >
              <option value="">(None)</option>
              {templates.map(t => (
                <option key={t.id} value={t.id}>
                  {t.name}
                </option>
              ))}
            </select>
            <p className="text-xs text-gray-500 mt-1">
              If empty, only the admin prompt below will be used.
            </p>
          </div>

          {/* Direct API key (dev) */}
          <div className="border rounded-xl p-3">
            <label className="flex items-center gap-2 text-sm mb-2">
              <input
                type="checkbox"
                checked={useDirectKey}
                onChange={e => setUseDirectKey(e.target.checked)}
              />
              Use direct OpenAI API (dev)
            </label>
            <input
              className="w-full border rounded-lg px-3 py-2 text-sm"
              placeholder="sk-... (stored locally)"
              value={apiKey}
              onChange={e => setApiKey(e.target.value)}
              disabled={!useDirectKey}
            />
            <div className="flex gap-2 mt-2">
              <button
                className="px-3 py-1.5 border rounded"
                onClick={saveKey}
                disabled={!useDirectKey}
              >
                Save key
              </button>
              <button
                className="px-3 py-1.5 border rounded"
                onClick={() => {
                  localStorage.removeItem(LS_API_KEY);
                  setApiKey('');
                  setUseDirectKey(false);
                }}
              >
                Clear
              </button>
            </div>
            <p className="text-xs text-gray-500 mt-2">
              For production, use the Cloud Function proxy to avoid exposing keys.
            </p>
          </div>
        </div>

        {/* Admin custom prompt */}
        <div className="grid md:grid-cols-3 gap-4">
          <div className="md:col-span-3">
            {/* Í¥ÄÎ¶¨Ïûê Ïª§Ïä§ÌÖÄ ÌîÑÎ°¨ÌîÑÌä∏ ÏûÖÎ†•ÎûÄ (ÏòÅÎ¨∏ UI) */}
            <label className="block text-sm font-medium mb-1">Custom Prompt (Admin-authored)</label>
            <textarea
              className="w-full border rounded-lg px-3 py-2 h-28"
              placeholder="Ex) Extract 5 core keywords from these lessons and write a 1000-character essay including those keywords."
              value={adminPrompt}
              onChange={e => setAdminPrompt(e.target.value)}
            />
            <div className="mt-2 flex items-center gap-4 text-sm">
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={forceJson}
                  onChange={e => setForceJson(e.target.checked)}
                />
                Force JSON output
              </label>
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={forceEnglish}
                  onChange={e => setForceEnglish(e.target.checked)}
                />
                Force English result
              </label>
            </div>
            <p className="text-xs text-gray-500 mt-1">
              Your prompt will be sent as-is. We append the module‚Äôs lessons as context under the
              hood.
            </p>
          </div>
        </div>

        {/* Actions */}
        <div className="flex items-center gap-3 mt-4">
          <button
            className="px-6 py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white disabled:opacity-60 disabled:cursor-not-allowed font-medium flex items-center gap-2 hover:from-purple-700 hover:to-blue-700 transition-all"
            onClick={() => handleGenerate()}
            disabled={!selectedModuleId || isGenerating}
          >
            {isGenerating ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                <span>Generating...</span>
              </>
            ) : (
              <>
                <span>ü§ñ</span>
                <span>Generate Challenge</span>
              </>
            )}
          </button>
          <button
            className="px-4 py-3 rounded-lg border border-gray-300 hover:border-gray-400 disabled:opacity-60 disabled:cursor-not-allowed font-medium transition-colors"
            onClick={() => {
              if (!selectedModuleId) {
                Swal.fire({
                  icon: 'warning',
                  title: 'Module Required',
                  text: 'Please select a module first.',
                });
                return;
              }
              if (!challenges.length) {
                Swal.fire({
                  icon: 'info',
                  title: 'No Challenge Found',
                  text: 'Generate a challenge first before regenerating.',
                });
                return;
              }
              handleGenerate(challenges[0].id); // regenerate latest
            }}
            disabled={!selectedModuleId || !challenges.length || isGenerating}
          >
            üîÑ Regenerate Latest
          </button>
        </div>
      </div>

      {/* Two-column: Templates / Challenges */}
      <div className="grid md:grid-cols-2 gap-6">
        {/* Template manager */}
        <TemplateManager selectedId={selectedTemplateId} onSelectId={setSelectedTemplateId} />

        {/* Challenges of current module */}
        <div className="bg-white border rounded-2xl p-4 md:p-6 shadow-sm">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-lg font-semibold">Generated Challenges</h3>
            <span className="text-sm text-gray-500">
              {moduleDoc ? moduleDoc.title : 'No module selected'}
            </span>
          </div>

          <div className="max-h-[420px] overflow-auto border rounded-xl">
            <table className="w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="text-left p-2">Template</th>
                  <th className="text-left p-2">Created</th>
                  <th className="text-left p-2">Updated</th>
                  <th className="text-right p-2">Actions</th>
                </tr>
              </thead>
              <tbody>
                {challenges.map(c => (
                  <tr key={c.id} className="border-t hover:bg-gray-50">
                    <td className="p-2">{c.templateName || 'Custom'}</td>
                    <td className="p-2">
                      {c.createdAt?.toDate ? c.createdAt.toDate().toLocaleString() : '-'}
                    </td>
                    <td className="p-2">
                      {c.updatedAt?.toDate ? c.updatedAt.toDate().toLocaleString() : '-'}
                    </td>
                    <td className="p-2 text-right space-x-2">
                      <button
                        className="px-2 py-1 border rounded"
                        onClick={() => handleGenerate(c.id)}
                      >
                        Regenerate
                      </button>
                      <button
                        className="px-2 py-1 border rounded text-red-600"
                        onClick={() => handleDeleteChallenge(c.id!)}
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
                {(!selectedModuleId || challenges.length === 0) && (
                  <tr>
                    <td className="p-3 text-gray-500" colSpan={4}>
                      {selectedModuleId
                        ? 'No challenges yet.'
                        : 'Select a module to see its challenges.'}
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {/* Preview of latest */}
          <div className="mt-4">
            <h4 className="font-semibold mb-2">Preview (latest)</h4>
            {showTypingAnimation && generatedContent ? (
              <AIResponseTyping
                text={generatedContent}
                onComplete={() => {
                  console.log('Typing animation completed');
                }}
                onPreview={(content) => {
                  setPreviewContent(content);
                  setIsPreviewModalOpen(true);
                }}
              />
            ) : (
              <pre className="text-xs bg-gray-50 p-3 rounded-xl overflow-auto max-h-72">
                {challenges[0]?.generatedContent
                  ? typeof challenges[0].generatedContent === 'string'
                    ? challenges[0].generatedContent
                    : JSON.stringify(challenges[0].generatedContent, null, 2)
                  : '// No preview - Generate a challenge to see AI-powered content here'}
              </pre>
            )}
          </div>
        </div>
      </div>

      {/* Preview Modal */}
      <PreviewModal
        isOpen={isPreviewModalOpen}
        onClose={() => setIsPreviewModalOpen(false)}
        content={previewContent}
      />
    </div>
  );
}
